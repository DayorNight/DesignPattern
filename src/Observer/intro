观察者模式（Observer Pattern）
http://www.runoob.com/design-pattern/observer-pattern.html
简介：
1、属于行为型模式：这些设计模式特别关注对象之间的通信。
2、当对象间存在一对多关系时，则使用观察者模式。比如，当一个对象被修改时，则会自动通知它的依赖对象。
3、意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
4、主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。
5、何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。
6、使用场景：
	（1）一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。
	（2）一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。
	（3）一个对象必须通知其他对象，而并不知道这些对象是谁。
	（4）需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。
7、注意事项：
	（1）JAVA 中已经有了对观察者模式的支持类。
	（2）避免循环引用。 
	（3）如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。
	
实现方式：
	实现观察者模式有很多形式，比较直观的一种是使用一种“注册――通知――注销”的形式。
	比如Android中的广播（不懂android也没关系，把它想象成学校的广播就成，具体看下面例子）
	观察者模式主要角色
	抽象观察者：描述观察者的公共接口（收到消息的方法），也可以定义为接口（interface）。
	具体观察者：描述具体观察者并对观察目标的改变做出反应。
	抽象被观察者（目标）：是指被观察的对象，描述被观察者的公共接口（比如通知、注册、注销等），也可以定义为接口
	具体被观察者（具体目标）：描述具体的被观察者，与观察者建立联系。当状态发生变化时，通知观察者。

举例：
	这里举个例子：智商有点不够用，想不到好的例子，这里就模拟Android四大组件之一的广播实现方式。
	首先我们要知道Android广播的大致实现流程：创建接收者（具体观察者）继承广播（抽象观察者），然后注册广播（绑定观察者，建立联系）。
	广播发送者（具体的被观察者）发送广播通知。最后是注销广播（解除绑定，断开联系）。
	看起来有点复杂，换种思路简单的想象成学校发出广播通知学生放学即可。
	
实现步骤简化版：
	1、创建具体被观察者(学校广播)继承抽象 被观察者
	2、创建具体观察者（学生）继承抽象观察者
	3、绑定联系
	4、发送通知
	
优点：
 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。
缺点：
 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 
2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 
3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。

demo下载地址：
https://github.com/DayorNight/DesignPattern